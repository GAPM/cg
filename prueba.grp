// Prueba de error
func pruebaError() {
    assert !error();
    assert serror() == "No error";
}

// Prueba de inferencia de tipos
func pruebaInferencia() {
    var a = 4.6;
    var b = 5;
    var c = "Hello";
    var d = graph [1];

    /* Los tipos de literales son inferidos por el compilador
    por lo que probar igualdad de variables con tipo inferido
    no debe resultar en error de compilaci√≥n */

    assert a == 4.6;
    assert b == 5;
    assert c == "Hello";
    assert d == graph [1];
}

func pruebaExpresiones() {
    var a = 3 + 4 + 5 * 6 / 6 - 3;
    var b = "He" + "llo";
    var c = 2.5 + 9.6 / 2.0;
    var d = digraph[2] {[0, 1]};
    var e = !(1 == 2) && false || true;

    assert a == 9;
    assert (a % 2) == (7 % 6);
    assert b == "Hello";
    assert c == 7.3;
    assert (d && !digraph[2]) == d;
    assert (d || digraph[2]) == d;
    assert e;
}

func pruebaConversion() {
    var a int = int(3.4) + int("4") + 5;
    var b = float(3) + 2.5 - float(int("1"));
    var c = bool("true") || bool("false");
    var d = string(1) + string(3.42) + string(true);
    var e = int("hello"); // Error de formato

    assert a == 12;
    assert b == 4.5;
    assert c == true;
    assert d == "13.42true";
    assert e == 0;
    assert error();
}

func pruebaAsignacion() {
    var a int;
    var b float;
    var c string;
    a = 354;
    b = 3.14159265;
    c = "Hello";

    assert a == 354;
    assert b == 3.14159265;
    assert c == "Hello";
}

func retorno() int {
    return 42;
}

func pruebaRetorno() {
    assert retorno() == 42;
}

func pruebaControl() {
    var i int;
    var r int;
    for (i = 0; i < 10; i += 1) {
        if (i > 7) { break; }
        elif (i % 2 == 0) { r += i; continue; }
        else { continue; }
        print "No debe imprimirse";
    }

    assert r == 12;
}

func pruebaImpresion() {
    print "Hola, mundo. ";
}

func pruebaIf() {
    var r = 0;
    var i = 16;

    if (i % 15 == 0) { r = 3; }
    elif(i % 5 == 0) { r = 2; }
    else { r = 1; }

    assert r == 1;
}

func pruebaWhile() {
    var r = 0;
    var i = 1;
    while (i <= 100) {
        r += i;
        i += 1;
    }

    assert r == 5050;
}

func pruebaFor() {
    var r = 1;
    var i = 1;
    for (i = 1; i <= 8; i += 1) {
        r *= i;
    }

    assert r == 40320;
}

func main() {
    pruebaError();
    pruebaInferencia();
    pruebaExpresiones();
    pruebaConversion();
    pruebaAsignacion();
    pruebaRetorno();
    pruebaControl();
    pruebaImpresion();
    pruebaIf();
    pruebaWhile();
    pruebaFor();
}
